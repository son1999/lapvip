<?php


namespace App\Modules\BackEnd\Controllers;



use App\Models\GeoDistrict;
use App\Models\GeoProvince;
use Illuminate\Http\Request;
use App\Models\Warehouse as THIS;

class WarehouseController extends BackendController
{
    protected $timeStamp = 'created';

    //config controller, ez for copying and paste
    public function __construct(){
        parent::__construct(new THIS(),[
            [
                'title' => 'required|max:250',
//                'province' => 'required'
            ]
        ]);
        $this->registerAjax('status_warehouse', 'ajaxstausWarehoue');
        $this->registerAjax('getDistrict', 'getDistrictList');
    }

    public function index(Request $request){
        $order = 'created DESC, id DESC';
        $cond = [];
        if($request->id != ''){
            $cond[] = ['id', $request->id];
        }else {
            if ($request->status != '') {
                $cond[] = ['status', $request->status];
            } else {
                $cond[] = ['status', '>', 0];
            }
            if ($request->province != '') {
                $cond[] = ['province', $request->province];
            }
            if ($request->title != '') {
                $cond[] = ['title', 'LIKE', '%' . $request->title . '%'];
            }
            if(!empty($request->time_from)){
                $timeStamp = \Lib::getTimestampFromVNDate($request->time_from);
                array_push($cond, ['created', '>=', $timeStamp]);
            }
            if(!empty($request->time_to)){
                $timeStamp = \Lib::getTimestampFromVNDate($request->time_to, true);
                array_push($cond, ['created', '<=', $timeStamp]);
            }
        }
        $data = THIS::where($cond)->orderByRaw($order)->paginate($this->recperpage);
        return $this->returnView('index', [
            'data' => $data,
            'search_data' => $request
        ]);
    }

    public function showEditForm($id){

        $province = GeoProvince::all();

        return $this->returnView('edit', [
            'data' => THIS::find($id),
            'province' =>$province,
        ]);
    }
    public function showAddForm()
    {
        $province = GeoProvince::all();

        return $this->returnView('add', [
            'province' =>$province,
        ]);
    }

    public function beforeSave(Request $request, $ignore_ext = [])
    {
        parent::beforeSave($request, $ignore_ext); // TODO: Change the autogenerated stub
        $arr_unset = [];
        $name = $request->name_sp;
        $title = $request->title_sp;
        $facbook = $request->face_sp;
        $phone = $request->phone_sp;
        $avartar = $request->avatar_sp;
        $avatar_name = $request->avatar_name_sp;

        $arr_unset [] = 'name';
        $arr_unset [] = 'title_sp';
        $arr_unset [] = 'face_sp';
        $arr_unset [] = 'phone_sp';
        $arr_unset [] = 'avatar';
        $arr_unset [] = 'avatar_name';
        $arr_supports = [];
        if (!empty($name) && !empty($title) && !empty($phone)){
            for($i=0;$i<count($title);$i++) {
                if(!empty($avartar[$i])){
                    $fname = \ImageURL::makeFileName($name[$i], $avartar[$i]->getClientOriginalExtension());
                    \ImageURL::upload($avartar[$i], $fname,  'warehouse');
                }
                elseif(!empty($avatar_name[$i])){
                    $fname = $avatar_name[$i];
                }
                $arr_supports[] = ['name' => $name[$i], 'title' => $title[$i], 'face' => $facbook[$i], 'phone' => $phone[$i], 'avatar' => $fname];
            }
        }
        $this->unsetFields($arr_unset);
        $this->model->supports = json_encode($arr_supports, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP | JSON_UNESCAPED_UNICODE);
    }

    public function ajaxstausWarehoue(Request $request){
        if($request->id > 0) {
            $data = $this->model::find($request->id);
            if ($data) {
                $before = $data->status;
                $data->status = $before == 1 ? 2 : 1;
                $data->save();
                \MyLog::do()->add($this->key.'-status_warehouse', $data->id, $data->status, $before);
                return \Lib::ajaxRespond(true, 'success');
            }
        }
        return \Lib::ajaxRespond(false, 'Không tìm thấy dữ liệu');
    }

    public static function getDistrictList()
    {

        $input = request()->id;
        $district['data'] = GeoDistrict::where("Province_ID", $input)->orderBy('safe_title')->get();
        echo json_encode($district);
        exit;
    }

}