<?php

namespace App\Modules\BackEnd\Controllers;

use App\Models\Category;
use App\Models\VideoGroups;
use Illuminate\Http\Request;

use App\Models\Video as THIS;

class VideoController extends BackendController
{

    //config controller, ez for copying and paste
    public function __construct(){
        parent::__construct(new THIS(),[
            [
//                'title' => 'required|max:250',
                'video_id' => 'required',
                'embed_code' => 'nullable',
            ]
        ]);

        \View::share('video_groups', VideoGroups::getGroups());
        \View::share('catOpt', Category::getCat(2));
        $this->registerAjax('is_top', 'ajaxVideoTop', 'edit');

    }

    public function index(Request $request){
        $order = 'created DESC, id DESC';
        $cond = [['status','>',0]];
        if($request->title != ''){
            $cond[] = ['title','LIKE','%'.$request->title.'%'];
        }
        if(!empty($request->time_from)){
            $timeStamp = \Lib::getTimestampFromVNDate($request->time_from);
            array_push($cond, ['created', '>=', $timeStamp]);
        }
        if(!empty($request->time_to)){
            $timeStamp = \Lib::getTimestampFromVNDate($request->time_to, true);
            array_push($cond, ['created', '<=', $timeStamp]);
        }
        if(!empty($cond)) {
            $data = THIS::with('groups')->where($cond)->orderByRaw($order)->paginate($this->recperpage);
        }else{
            $data = THIS::with('groups')->orderByRaw($order)->paginate($this->recperpage);
        }
        return $this->returnView('index', [
            'data' => $data,
            'search_data' => $request
        ]);
    }
    public function beforeSave(Request $request, $ignore_ext = [])
    {
        parent::beforeSave($request); // TODO: Change the autogenerated stub

        $this->model->created = strtotime(now());
        $this->model->status = !empty($request->status) ? $request->status : 1;
        if ($request->video_id){
            $data_video = \Lib::youtube_data_custome($request->video_id);
            if (!empty($data_video)){
                $this->model->title = $data_video['title'];
                $this->model->image_thumbnail = $data_video['thumbnails']['medium'];
                $this->model->view_count = $data_video['count']['viewCount'];
                $this->model->published_at = $data_video['publishedAt'];
                $this->model->channel_id = $data_video['channelId'];
            }
        }
    }
    protected function ajaxVideoTop(Request $request){
        if($request->id > 0) {
            $data = $this->model::find($request->id);
            if ($data) {
                $before = $data->is_top;
                $data->is_top = $request->show == 1 ? 1 : 0;
                $data->save();
                \MyLog::do()->add($this->key.'-is-top', $data->id, $data->is_top, $before);
                return \Lib::ajaxRespond(true, 'success');
            }
        }
        return \Lib::ajaxRespond(false, 'Không tìm thấy dữ liệu');
    }
}
