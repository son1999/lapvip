<?php

namespace App\Modules\BackEnd\Controllers;

use App\Libs\LoadDynamicRouter;
use App\Models\Category;
use App\Models\TagDetail;
use Illuminate\Http\Request;

use App\Models\Tag as THIS;
use Illuminate\Support\Str;

class TagController extends BackendController
{
    protected $timeStamp = 'created';

    //config controller, ez for copying and paste
    public function __construct(){
        parent::__construct(new THIS());
        LoadDynamicRouter::loadRoutesFrom('FrontEnd');
        $this->registerAjax('tag-add', 'ajaxAddTag', 'add');
        $this->registerAjax('tag-del', 'ajaxRemoveTag', 'delete');
        $this->registerAjax('tag-suggest', 'ajaxLoadSuggestTag');
        $this->title = 'Mục sản phẩm Trang chủ';
        \View::share('cat', Category::getCat(1));
    }

    public function index(Request $request) {
        $order = 'sort';
        $cond = [['status','>',0],['is_special_box','=',1]];
        if($request->title != ''){
            $cond[] = ['title','LIKE','%'.$request->title.'%'];
        }

        if($request->lang != ''){
            $cond[] = ['lang','=',$request->lang];
        }
        if(!empty($request->time_from)){
            $timeStamp = \Lib::getTimestampFromVNDate($request->time_from);
            array_push($cond, ['created', '>=', $timeStamp]);
        }
        if(!empty($request->time_to)){
            $timeStamp = \Lib::getTimestampFromVNDate($request->time_to, true);
            array_push($cond, ['created', '<=', $timeStamp]);
        }
        if(!empty($cond)) {
            $data = THIS::where($cond)->orderByRaw($order)->paginate($this->recperpage);
        }else{
            $data = THIS::orderByRaw($order)->paginate($this->recperpage);
        }
        return $this->returnView('index', [
            'data' => $data,
            'search_data' => $request
        ]);
    }

    public function beforeSave(Request $request, $ignore_ext = [])
    {
        parent::beforeSave($request); // TODO: Change the autogenerated stub

        $this->model->is_special_box = 1;
        $this->model->type = 2;
    }

    protected function ajaxLoadSuggestTag(Request $request){
        if(!empty($request->type)) {
            $tags = THIS::getTags($request->type,true);
            $data = [];
            foreach ($tags as $item){
                $data[] = $item['title'];
            }
            return \Lib::ajaxRespond(true, 'success', $data);
        }
        return \Lib::ajaxRespond(false, 'Không tìm thấy dữ liệu');
    }

    protected function ajaxAddTag(Request $request){
        if (!empty($request->tag)) {
            $safe_title = Str::slug($request->tag);
            $tag = THIS::where([
                ['safe_title', '=', $safe_title],
                ['type', '=', $request->type],
            ])->first();
            if (empty($tag)) {
                $tag = new THIS();
                $tag->title = $request->tag;
                $tag->safe_title = $safe_title;
                $tag->type = $request->type;
                $tag->created = time();
                $tag->save();
                \MyLog::do()->add($this->key.'-add', $tag->id, $tag);
            }
            return \Lib::ajaxRespond(true, 'success', $tag->id);
        }
        return \Lib::ajaxRespond(false, 'Không tìm thấy dữ liệu');
    }

    protected function ajaxRemoveTag(Request $request){
        if (!empty($request->tag)) {
            $safe_title = Str::slug($request->tag);
            $tag = THIS::where([
                ['safe_title', '=', $safe_title],
                ['type', '=', $request->type]
            ])->first();
            if (!empty($tag)) {
                switch ($request->type) {
                    case 1:
                        if ($request->id > 0) {
                            TagDetail::where([
                                ['tag_id', '=', $tag->id],
                                ['news_id', '=', $request->id]
                            ])->delete();
                        }
                        //kiem tra neu ko trong che do su dung thi xoa
                        $check = TagDetail::where([
                            ['tag_id', '=', $tag->id]
                        ])->first();
                        if (empty($check)) {
                            $tag->delete();
                            \MyLog::do()->add($this->key.'-remove', $tag->id);
                        }
                        break;
                }
            }
            return \Lib::ajaxRespond(true, 'success', $tag->id);
        }
        return \Lib::ajaxRespond(false, 'Không tìm thấy dữ liệu');
    }
}
