<?php

namespace App\Modules\BackEnd\Controllers;

use App\Models\Filter;
use App\Models\FilterDetail;
use Illuminate\Http\Request;

use App\Models\Filter as THIS;
use App\Models\FilterCate;

class FilterController extends BackendController
{
    protected $timeStamp = 'created';
    protected $folder_upload = 'filters';

    //config controller, ez for copying and paste
    public function __construct(Request $request){
        parent::__construct(new THIS());
        $this->bladeAdd = 'add';
        $this->registerAjax('filter-add', 'ajaxAddFilter', 'add');
        $this->registerAjax('filter-del', 'ajaxRemoveFilter', 'delete');
        $this->registerAjax('filter-suggest', 'ajaxLoadSuggestFilter');

        \View::share('filters_cate_id', FilterCate::getFilterCate());
        \View::share('filter_far',  Filter::getFilterFar(isset(\request()->ids) && !empty(\request()->ids) ? \request()->ids : 0));
        \View::share('request', $request);
        $this->registerAjax('updateFar', 'ajaxUpdateFar');
    }

    public function index(Request $request){
        $cond = [];
        if($request->id != ''){
            $cond[] = ['id', $request->id];
        }else {
            if ($request->status != '') {
                $cond[] = ['status', $request->status];
            } else {
                $cond[] = ['status', '>', 0];
            }
            if ($request->lang != '') {
                $cond[] = ['lang', '=', $request->lang];
            }
            if ($request->filter_cate_id != '') {
                $cond[] = ['filter_cate_id', $request->filter_cate_id];
            }
            if ($request->title != '') {
                $cond[] = ['title', 'LIKE', '%' . $request->title . '%'];
            }
            if(!empty($request->time_from)){
                $timeStamp = \Lib::getTimestampFromVNDate($request->time_from);
                array_push($cond, ['created', '>=', $timeStamp]);
            }
            if(!empty($request->time_to)){
                $timeStamp = \Lib::getTimestampFromVNDate($request->time_to, true);
                array_push($cond, ['created', '<=', $timeStamp]);
            }
        }
        if(!empty($cond)) {
            $data = THIS::with(['filter_cate'])->where($cond)->orderByRaw('created DESC, id DESC')->paginate($this->recperpage);
        }else{
            $data = THIS::orderByRaw('created DESC, id DESC')->paginate($this->recperpage);
        }
        
        return $this->returnView('index', [
            'data' => $data,
            'search_data' => $request,
        ]);
    }

    public function showEditForm($id){
        $data = THIS::find($id);
        $filter_far = Filter::getFilterFar(isset(\request()->ids) && !empty(\request()->ids) ? \request()->ids : $data->filter_cate_id);
        $filters = THIS::getProductFilters($id);
        if(!empty($filters)){
            $tmp = [];
            foreach ($filters as $item){
                $tmp[] = $item->title;
            }
            $filters = implode(',', $tmp);
        }else{
            $filters = '';
        }
        return $this->returnView('edit', [
            'data' => $data,
            'filters' => $filters,
            'filter_far' => @$filter_far,
        ]);
    }
//    public function showAddForm()
//    {
//        return parent::showAddForm(); // TODO: Change the autogenerated stub
//        $filter_far = Filter::getFilterFar(isset(\request()->ids) && !empty(\request()->ids) ? \request()->ids : 0);
//
//    }

    public function beforeSave(Request $request, $ignore_ext = [])
    {
        parent::beforeSave($request); // TODO: Change the autogenerated stub
        $this->model->status = !empty($request->status) ? $request->status : 1;
        $this->model->safe_title = str_slug($request->title);
        $max_date = THIS::max('created');
        // dd($max_date);
        // if($max_date) {
        //     $this->model->filter_cate_id = $request->filter_cate_id;
        // }
        
    }

    protected function ajaxLoadSuggestFilter(Request $request){
        if(!empty($request->type)) {
            $filters = THIS::getFilters($request->type);
            $data = [];
            foreach ($filters as $item){
                $data[] = $item['title'];
            }
            return \Lib::ajaxRespond(true, 'success', $data);
        }
        return \Lib::ajaxRespond(false, 'Không tìm thấy dữ liệu');
    }

    protected function ajaxAddFilter(Request $request){
        dd(1);
        if (!empty($request->filter)) {
            $safe_title = str_slug($request->filter);
            $filter = THIS::where([
                ['safe_title', '=', $safe_title],
                ['type', '=', $request->type],
            ])->first();
            // dd($filter);
            if (empty($filter)) {
                $filter = new THIS();
                $filter->title = $request->filter;
                $filter->safe_title = $safe_title;
                $filter->filter_cate_id = $request->type; // tạm thời = 1: Khối lượng muốn mua.
                // $filter->type = $request->type;
                $filter->created = time();
                $filter->status = 1;
                $filter->save();
                \MyLog::do()->add($this->key.'-add', $filter->id, $filter);
            }
            return \Lib::ajaxRespond(true, 'success', $filter->id);
        }
        return \Lib::ajaxRespond(false, 'Không tìm thấy dữ liệu');
    }

    protected function ajaxRemoveFilter(Request $request){
        if (!empty($request->filter)) {
            $safe_title = str_slug($request->filter);
            $filter = THIS::where([
                ['safe_title', '=', $safe_title],
                ['type', '=', $request->type]
            ])->first();
            if (!empty($filter)) {
                switch ($request->type) {
                    case 'product':
                        if ($request->id > 0) {
                            FilterDetail::where([
                                ['filter_id', '=', $filter->id],
                                ['object_id', '=', $request->id]
                            ])->delete();
                        }
                        //kiem tra neu ko trong che do su dung thi xoa
                        $check = FilterDetail::where([
                            ['filter_id', '=', $filter->id]
                        ])->first();
                        if (empty($check)) {
                            $filter->delete();
                            \MyLog::do()->add($this->key.'-remove', $filter->id);
                        }
                        break;
                }
            }
            return \Lib::ajaxRespond(true, 'success', $filter->id);
        }
        return \Lib::ajaxRespond(false, 'Không tìm thấy dữ liệu');
    }

    protected function ajaxUpdateFar(Request $request){
        if($request->id > 0) {
            $data = $this->model::find($request->id);
            if ($data) {
                $before = $data->is_far;
                $data->is_far = $request->show == 1 ? 1 : 0;
                $data->save();
                \MyLog::do()->add($this->key.'-is_far', $data->id, $data->is_far, $before);
                return \Lib::ajaxRespond(true, 'success');
            }
        }
        return \Lib::ajaxRespond(false, 'Không tìm thấy dữ liệu');
    }
}
