<?php

namespace App\Modules\BackEnd\Controllers;

use App\Models\Category;
use App\Models\Comment;
use App\Models\Customer;
use Illuminate\Http\Request;

use App\Models\Tag;
use App\Models\OldCollection as THIS;

class OldCollectionController extends BackendController
{
    protected $timeStamp = 'created';

    //config controller, ez for copying and paste
    public function __construct(){
        $this->bladeAdd = 'add';
        parent::__construct(new THIS(),[
            [
                'title' => 'required|max:250',
                'title_seo' => 'max:250',
                'category_id' => 'required',
                'alias' => 'required',
                'sort_body' => 'nullable',
                'body' => 'nullable|min:50',
            ],
            [
                'title.require' => 'Tiều đề seo, tên không được để trống',
                'title.max' => 'Tiều đề seo, tên tối đa 250 kí tự',
                'cat_id.require' => 'Vui lòng chọn danh mục tin',
                'alias.require' => 'Link ko được để trống',

            ]
        ]);

        \View::share('catOpt', Category::getCat(1));
        $this->registerAjax('hotnews', 'ajaxHotNews');
        $this->registerAjax('listhot', 'ajaxListHot');
    }

    public function index(Request $request){
        $order = 'created DESC, id DESC';
        $cond = [];
        if ($request->status != '') {
            $cond[] = ['status', $request->status];
        } else {
            $cond[] = ['status', '>', 0];
        }
        if($request->title != ''){
            $cond[] = ['title','LIKE','%'.$request->title.'%'];
        }
        if($request->lang != ''){
            $cond[] = ['lang','=',$request->lang];
        }
        if($request->type != ''){
            $cond[] = ['cat_id','=',$request->cat_id];
        }
        if(!empty($request->time_from)){
            $timeStamp = \Lib::getTimestampFromVNDate($request->time_from);
            array_push($cond, ['created', '>=', $timeStamp]);
        }
        if(!empty($request->time_to)){
            $timeStamp = \Lib::getTimestampFromVNDate($request->time_to, true);
            array_push($cond, ['created', '<=', $timeStamp]);
        }
        if(!empty($request->publish_from)){
            $timeStamp = \Lib::getTimestampFromVNDate($request->publish_from);
            array_push($cond, ['published', '>=', $timeStamp]);
        }
        if(!empty($request->publish_to)){
            $timeStamp = \Lib::getTimestampFromVNDate($request->publish_to, true);
            array_push($cond, ['published', '<=', $timeStamp]);
        }
        if(!empty($cond)) {
            $data = THIS::where($cond)->orderByRaw($order)->paginate($this->recperpage);
        }else{
            $data = THIS::orderByRaw($order)->paginate($this->recperpage);
        }

        return $this->returnView('index', [
            'data' => $data,
            'search_data' => $request
        ]);
    }

    public function buildValidate(Request $request){
        if ($request->hasFile('image')) {
            $this->addValidate(['image' => ['mimes:jpeg,jpg,png,gif','Ảnh đại diện']]);
        }
    }

    public function beforeSave(Request $request, $ignore_ext = [])
    {
        parent::beforeSave($request); // TODO: Change the autogenerated stub

        $this->model->title_seo = !empty($request->title_seo) ? $request->title_seo : $request->title;
        if(!empty($request->published)){
            $this->model->published = \Lib::getTimestampFromVNDate($request->published);
        }
        $this->uploadBanner($request, $request->title .'-banner', 'banner');
        $this->model->uid = \Auth::user()->id;
        //xoa truong thua
        unset($this->model->tags);
        unset($this->model->category_id);
    }

    public function afterSave(Request $request){
        $cates = $request->category_id;
        $this->model->cates()->sync($cates);
    }

    public  function ajaxHotNews(Request $request){
        if($request->id > 0) {
            $data = $this->model::find($request->id);
            if ($data) {
                $before = $data->hot_new;
                $data->hot_new = $request->show == 1 ? 1 : 0;
                $data->save();
                \MyLog::do()->add($this->key.'-hotnew', $data->id, $data->hot_new, $before);
                return \Lib::ajaxRespond(true, 'success');
            }
        }
        return \Lib::ajaxRespond(false, 'Không tìm thấy dữ liệu');
    }
    public  function ajaxListHot(Request $request){
        if($request->id > 0) {
            $data = $this->model::find($request->id);
            if ($data) {
                $before = $data->list_hot;
                $data->list_hot = $request->show == 1 ? 1 : 0;
                $data->save();
                \MyLog::do()->add($this->key.'-listhot', $data->id, $data->list_hot, $before);
                return \Lib::ajaxRespond(true, 'success');
            }
        }
        return \Lib::ajaxRespond(false, 'Không tìm thấy dữ liệu');
    }
    public function showEditForm($id){
        $data = THIS::find($id);
        \View::share('catOpt', Category::getCat(1));
        $cates = \DB::table('old_collection_cate_pivot')->where('old_collection_cate_id', $id)->select('cate_id as id')->get();
        return $this->returnView('edit', [
            'data' => $data,
            'cates' => json_decode($cates, true)

        ]);
    }
}
