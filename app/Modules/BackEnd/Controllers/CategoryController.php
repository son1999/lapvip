<?php

namespace App\Modules\BackEnd\Controllers;

use App\Libs\LoadDynamicRouter;
use App\Models\Category;
use Illuminate\Http\Request;
use App\Models\Category as THIS;
use Illuminate\Support\Str;

class CategoryController extends BackendController
{
    protected $recperpage = 9999;
    protected $timeStamp = 'created';


    public function __construct(){
        parent::__construct(new THIS(),[['title' => 'required|max:250', 'page_format' => 'required']]);
        $this->bladeAdd = 'add';
        $this->folder_upload = Category::$KEY;
        LoadDynamicRouter::loadRoutesFrom('FrontEnd');
        \View::share('type', THIS::getType());
        $this->registerAjax('get-cat', 'ajaxGetCat');
        $this->registerAjax('get-cat_f', 'ajaxGetCatF');
        $this->registerAjax('fetch-cat-lang', 'ajaxFetchCat');
    }

    public function index(Request $request){
        $order = 'type, pid, sort DESC, title';
        $cond = [['status','>','0']];
        if($request->lang != ''){
            $cond[] = ['lang','=',$request->lang];
        }
        if($request->type != ''){
            $cond[] = ['type','=',$request->type];
        }
        if($request->title != ''){
            $cond[] = ['title','LIKE','%'.$request->title.'%'];
        }
        if(!empty($cond)) {
            $data = THIS::where($cond)->orderByRaw($order)->paginate($this->recperpage);
        }else{
            $data = THIS::orderByRaw($order)->paginate($this->recperpage);
        }
        return $this->returnView('index', [
            'data' => $this->fetchResult($data),
            'search_data' => $request
        ]);
    }

    public function fetchResult($data){
        $tmp = [];
        $type = THIS::getType();
        foreach($data as $key => $item){
            if(!isset($tmp[$item->type])){
                $tmp[$item->type] = [
                    'title' => $type[$item->type],
                    'type' => $item->type,
                    'cats' => []
                ];
            }
            if($item->pid == 0){
                $tmp[$item->type]['cats'][$item->id] = [
                    'data' => $item,
                    'sub' => []
                ];
                unset($data[$key]);
            }elseif(isset($tmp[$item->type]['cats'][$item->pid])){
                $tmp[$item->type]['cats'][$item->pid]['sub'][$item->id] = [
                    'data' => $item,
                    'sub' => []
                ];
                unset($data[$key]);
            }
        }
        foreach($data as $key => $item){
            foreach ($tmp[$item->type]['cats'] as $i => $menu){
                foreach($menu['sub'] as $k => $sub){
                    if($k == $item->pid){
                        $tmp[$item->type]['cats'][$i]['sub'][$k]['sub'][$item->id] = $item;
                    }
                }
            }
        }
        return $tmp;
    }

    public function beforeSave(Request $request, $ignore_ext = [])
    {
        parent::beforeSave($request); // TODO: Change the autogenerated stub
        $this->uploadImage($request, $request->title.'-icon', 'icon');
        $this->uploadImage($request, $request->title.'-icon-hover', 'icon_hover');

        if($request->type < 0){
            $this->setError(['type' => 'Vui lòng chọn loại danh mục']);
        }

    }

    public function afterSave(Request $request)
    {
        parent::afterSave($request); // TODO: Change the autogenerated stub
        $this->model->slug = Str::slug($this->model->title).'-'.$this->model->id;

        $this->model->save();
    }


    public function showEditForm($id){
        $data = $this->model::with('filter_cates')->find($id);
        set_old($data);
        if($data) {
            return $this->returnView('edit', ['data' => $data]);
        }
        return $this->notfound($id);
    }

    protected function ajaxGetCat(Request $request){
        $menu = [];
        if($request->type >= 0){
            $menu = THIS::getCat($request->type, $request->lang);
        }
        return \Lib::ajaxRespond(true, 'ok', $menu);
    }
    protected function ajaxGetCatF(Request $request){
        $menu = [];
        if($request->type_f >= 0){
            $menu = THIS::getCat($request->type_f, $request->lang);
        }
        return \Lib::ajaxRespond(true, 'ok', $menu);
    }

    protected function ajaxFetchCat(Request $request){
        $data = THIS::getCat($request->type, $request->lang);
        $data = \View::make("BackEnd::pages.category.option", [
            'options' => $data,
            'def' => $request->def
        ])->render();
        $data = \StringLib::trimHtml($data);
        return \Lib::ajaxRespond(true, 'ok', $data);
    }
}
