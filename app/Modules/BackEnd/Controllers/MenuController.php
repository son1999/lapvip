<?php

namespace App\Modules\BackEnd\Controllers;

use App\Models\Category;
use Illuminate\Http\Request;

use App\Models\Menu as THIS;

class MenuController extends BackendController
{
    protected $timeStamp = 'created';
    protected $recperpage = 9999;

    //config controller, ez for copying and paste
    public function __construct(){
        parent::__construct(new THIS(),[
            [
                'title' => 'required|max:250',
                'type' => 'required',

            ]
        ]);
        $this->bladeAdd = 'add';
        \View::share('allType', THIS::$menuType);

        //for edit and add
        if($this->form != 'list') {
            $routes = \Lib::getRoutes(true);
            $out = array_merge($routes['public'], $routes['admin']);
            \View::share('routes', json_encode($out));
            \View::share('permList', \Role::getPermissions());
        }
        \View::share('catOpt', Category::getCat(1));
        \View::share('cat', Category::getCat(1));
        \View::share('type', Category::getType());
        $this->registerAjax('get-cat', 'ajaxGetCat');
        $this->registerAjax('get-menu', 'ajaxGetMenu');
    }

    public function index(Request $request){
        $order = 'type, pid, sort DESC, title';
        $cond = [['status','>','0']];
        if($request->title != ''){
            $cond[] = ['title','LIKE','%'.$request->title.'%'];
        }
        if($request->lang != ''){
            $cond[] = ['lang','=',$request->lang];
        }
        if(!empty($cond)) {
            $data = THIS::where($cond)->orderByRaw($order)->paginate($this->recperpage);
        }else{
            $data = THIS::orderByRaw($order)->paginate($this->recperpage);
        }
        return $this->returnView('index', [
            'data' => $this->fetchResult($data),
            'search_data' => $request
        ]);
    }

    public function fetchResult($data){
        $tmp = [];
        foreach($data as $key => $item){
            if(!isset($tmp[$item->type])){
                $tmp[$item->type] = [
                    'title' => THIS::$menuType[$item->type],
                    'type' => $item->type,
                    'menus' => []
                ];
            }
            if($item->pid == 0){
                $tmp[$item->type]['menus'][$item->id] = [
                    'data' => $item,
                    'sub' => []
                ];
                // 
                unset($data[$key]);
            }elseif(isset($tmp[$item->type]['menus'][$item->pid])){
                $tmp[$item->type]['menus'][$item->pid]['sub'][$item->id] = [
                    'data' => $item,
                    'sub' => []
                ];
                unset($data[$key]);
            }
        }
        foreach($data as $key => $item){
            foreach ($tmp[$item->type]['menus'] as $i => $menu){
                foreach($menu['sub'] as $k => $sub){
                    if($k == $item->pid){
                        $tmp[$item->type]['menus'][$i]['sub'][$k]['sub'][$item->id] = $item;
                    }
                }
            }
        }
        return $tmp;
    }

    public function beforeSave(Request $request, $ignore_ext = [])
    {
        parent::beforeSave($request); // TODO: Change the autogenerated stub
//        dd($request->title);
        $this->model->type = $request->type >= 0 ? $request->type : 9;
        $this->model->no_follow = !empty($request->no_follow) ? 1 : 0;
        $this->model->newtab = !empty($request->newtab) ? 1 : 0;
        if (!empty($request->img_icon)){
            $this->uploadBanner($request, $request->title .'-icon', 'img_icon');
        }
    }

    protected function ajaxGetMenu(Request $request){
        $menu = [];
        if($request->type >= 0){
            $menu = THIS::getMenu($request->type, false, $request->lang);
        }
        return \Lib::ajaxRespond(true, 'ok', $menu);
    }
}
