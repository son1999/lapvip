<?php

namespace App\Modules\BackEnd\Controllers;

use App\Models\Celebrities;
use App\Models\StoryCelebrities;
use App\Models\StoryImage;
use App\Models\StoryWT;
use Illuminate\Http\Request;

use App\Models\StoryWT as THIS;
use Illuminate\Support\Facades\Auth;

class StoryWTController extends BackendController
{
    protected $timeStamp = 'created';

    //config controller, ez for copying and paste
    public function __construct(){
        $this->bladeAdd = 'add';
        parent::__construct(new THIS(), [
//            [
//                'title' => 'required|max:250',
//                'title_seo' => 'max:250',
//                'body' => 'required|min:50',
//            ]
        ]);

//        \View::share('type', THIS::$type);
        $this->registerAjax('loadproduct', 'ajaxImageLoadProduct');
        $this->registerAjax('loadslide', 'ajaxImageLoadSlide');
        $this->registerAjax('loadCelebrities', 'ajaxLoadCelebrities');
        $this->registerAjax('upload_img_product', 'ajaxItemUploadMultiProduct');
        $this->registerAjax('upload_img_slide', 'ajaxItemUploadMultiSlide');
        $this->registerAjax('remove_img_product', 'ajaxItemImgDelProduct', 'delete');
        $this->registerAjax('remove_img_slide', 'ajaxItemImgDelSlide', 'delete');
        $this->registerAjax('remove_celebrities', 'ajaxItemCelebrities', 'delete');
        $this->registerAjax('add_celebrities', 'ajaxAddItemCelebrities');
    }

    public function index(Request $request){
        $order = 'created DESC, id DESC';
        $cond = [];
        if ($request->status != '') {
            $cond[] = ['status', $request->status];
        } else {
            $cond[] = ['status', '>', 0];
        }
        if($request->lang != ''){
            $cond[] = ['lang','=',$request->lang];
        }
        if($request->title != ''){
            $cond[] = ['title','LIKE','%'.$request->title.'%'];
        }
        if(!empty($request->time_from)){
            $timeStamp = \Lib::getTimestampFromVNDate($request->time_from);
            array_push($cond, ['created', '>=', $timeStamp]);
        }
        if(!empty($request->time_to)){
            $timeStamp = \Lib::getTimestampFromVNDate($request->time_to, true);
            array_push($cond, ['created', '<=', $timeStamp]);
        }
        if(!empty($cond)) {
            $data = THIS::where($cond)->orderByRaw($order)->paginate($this->recperpage);
        }else{
            $data = THIS::orderByRaw($order)->paginate($this->recperpage);
        }
        return $this->returnView('index', [
            'data' => $data,
            'search_data' => $request
        ]);
    }

    public function beforeSave(Request $request, $ignore_ext = [])
    {
        parent::beforeSave($request); // TODO: Change the autogenerated stub
        if(empty($this->model->title_seo)){
            $this->model->title_seo = $this->model->title;
        }
        if(empty($this->model->link_seo)){
            $this->model->link_seo = \Illuminate\Support\Str::slug($this->model->title);
        }
        if(empty($this->model->sort)){
            $this->model->sort = 0;
        }
        $this->model->status = $request->status ? $request->status : 1;
        //xoa bien
        unset($this->model->uploadintro);
        unset($this->model->uploadstore);
        unset($this->model->uploadify_hotel_img);
        unset($this->model->img_upload_for_add);
        unset($this->model->uploadify_hotel_img_slide);
        unset($this->model->img);
        unset($this->model->name);
        unset($this->model->_tokens);

    }

    public function afterSave(Request $request)
    {
        parent::afterSave($request); // TODO: Change the autogenerated stub
        $story = $this->model->img_upload_for_add_slide;
        $storyImg = StoryImage::where('object_id', null)->get();
        $storyCele = StoryCelebrities::where('object_id', null)->get();
        $img_id  = explode(',', $story);
        foreach ($img_id as $item){
            foreach ($storyImg as $obj){
                if((int)$item == $obj->id){
                    $object = StoryImage::find($obj->id);
                    $object->object_id = $this->model->id;
                    $object->save();

                }
            }
        }
        foreach ($storyCele as $obj){
            $object = StoryCelebrities::find($obj->id);
            $object->object_id = $this->model->id;
            $object->save();
        }
    }

    private function uploadImg(Request $request, $name,  $files)
    {
        if ($request->hasFile($files)) {
            $image = $request->file($files);
            if ($image->isValid()) {
                $fname = \ImageURL::makeFileName($name, $image->getClientOriginalExtension());
                $image = \ImageURL::upload($image, $fname,  (empty($key) ? ($this->folder_upload ? $this->folder_upload : $this->key) : $key));
                if($image){
                    if(!empty($imageField)) {
                        $this->model->$imageField = $fname;
                    }
                    return $fname;
                }else{
                    $this->setError([$files => 'Upload ảnh lên server thất bại!']);
                }
            }else{
                $this->setError([$files => 'Upload ảnh thất bại!']);
            }
        }
        return '';
    }


    protected function ajaxItemUploadMultiProduct(Request $request){
        if ($request->hasFile('Filedata')) {
            $image = $request->file('Filedata');
            if ($image->isValid()) {
                $title = basename($image->getClientOriginalName(), '.'.$image->getClientOriginalExtension());
                $fname = $this->uploadImage($request, $title, 'Filedata');
                if(!empty($fname)){
                    $imgGallery = new StoryImage();
                    $imgGallery->object_id = $request->object_id;
                    $imgGallery->image = $fname;
                    $imgGallery->created = time();
                    $imgGallery->type = $request->type;
                    $imgGallery->user_id = \Auth::id();
                    $imgGallery->sort = StoryImage::getSortInsert($request->lang);
                    $imgGallery->save();

                    if(empty($imgGallery->object_id)) {
                        return \Lib::ajaxRespond(true, 'ok', ['id' => $imgGallery->id]);
                    }else {
                        return \Lib::ajaxRespond(true, 'ok', ['images' => StoryWT::getImageGalleryProduct($request->object_id,$request->type)]);
                    }
                }
                return \Lib::ajaxRespond(false, 'Upload ảnh thất bại!');
            }
            return \Lib::ajaxRespond(false, 'File không hợp lệ!');
        }
        return \Lib::ajaxRespond(false, 'Không tìm thấy ảnh!');
    }

    protected function ajaxItemUploadMultiSlide(Request $request){
        if ($request->hasFile('Filedata')) {
            $image = $request->file('Filedata');
            if ($image->isValid()) {
                $title = basename($image->getClientOriginalName(), '.'.$image->getClientOriginalExtension());
                $fname = $this->uploadImage($request, $title, 'Filedata');
                if(!empty($fname)){
                    $imgGallery = new StoryImage();
                    $imgGallery->object_id = $request->object_id;
                    $imgGallery->image = $fname;
                    $imgGallery->created = time();
                    $imgGallery->type = $request->type;
                    $imgGallery->user_id = \Auth::id();
                    $imgGallery->sort = StoryImage::getSortInsert($request->lang);
                    $imgGallery->save();

                    if(empty($imgGallery->object_id)) {
                        return \Lib::ajaxRespond(true, 'ok', ['id' => $imgGallery->id]);
                    }else {
                        return \Lib::ajaxRespond(true, 'ok', ['images' => StoryWT::getImageGallerySlide($request->object_id,$request->type)]);
                    }
                }
                return \Lib::ajaxRespond(false, 'Upload ảnh thất bại!');
            }
            return \Lib::ajaxRespond(false, 'File không hợp lệ!');
        }
        return \Lib::ajaxRespond(false, 'Không tìm thấy ảnh!');
    }

    protected function ajaxImageLoadProduct(Request $request){
        return \Lib::ajaxRespond(true, 'ok', ['images' => StoryWT::getImageGalleryProduct($request->object_id,$request->type)]);
    }

    protected function ajaxImageLoadSlide(Request $request){
        return \Lib::ajaxRespond(true, 'ok', ['images' => StoryWT::getImageGallerySlide($request->object_id,$request->type)]);
    }

    protected function ajaxLoadCelebrities(Request $request){
        return \Lib::ajaxRespond(true, 'ok', ['images' => StoryWT::getStoryCelebrities($request->object_id,$request->type)]);
    }

    protected function ajaxItemImgDelProduct(Request $request){
        if($request->id > 0){
            $data = StoryImage::where('id',$request->id)->where('object_id',$request->object_id)->where('type',$request->type)->first();
            if($data){
                $data->delete();
                return \Lib::ajaxRespond(true, 'ok', ['images' => StoryWT::getImageGalleryProduct($request->object_id,$request->type)]);
            }
        }
        return \Lib::ajaxRespond(false, 'Không tìm thấy dữ liệu');
    }

    protected function ajaxItemImgDelSlide(Request $request){
        if($request->id > 0){
            $data = StoryImage::where('id',$request->id)->where('object_id',$request->object_id)->where('type',$request->type)->first();
            if($data){
                $data->delete();
                return \Lib::ajaxRespond(true, 'ok', ['images' => StoryWT::getStoryCelebrities($request->object_id,$request->type)]);
            }
        }
        return \Lib::ajaxRespond(false, 'Không tìm thấy dữ liệu');
    }
    protected function ajaxItemCelebrities(Request $request){
        if($request->id > 0){
            $data = StoryCelebrities::where('id',$request->id)->where('object_id',$request->object_id)->where('type',$request->type)->first();
            if($data){
                $data->delete();
                return \Lib::ajaxRespond(true, 'ok', ['images' => StoryWT::getImageGallerySlide($request->object_id,$request->type)]);
            }
        }
        return \Lib::ajaxRespond(false, 'Không tìm thấy dữ liệu');
    }

    protected function ajaxAddItemCelebrities(Request $request){
        if (empty($request->img)) {
            return \Lib::ajaxRespond(false, 'Chưa có Image bạn ơi');
        }
        if(empty($request->name)){
            return \Lib::ajaxRespond(false, 'Bạn chưa nhập Name mà');
        }

        $celeb = new Celebrities();
        $celeb->name = $request->name;
        $celeb->object_id = $request->object_id ? $request->object_id : '';
        $celeb->type = 'celebrities';
        $celeb->user_id = Auth::user()->id;
        $celeb->created = strtotime(now());
        $imga = $this->uploadImg($request, $request->name,'img');
        $celeb->img_celebrities = $imga;
        $celeb->save();;
        return \Lib::ajaxRespond(true, 'thành công!!! ');
    }
}
